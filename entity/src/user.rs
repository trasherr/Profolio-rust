//! `SeaORM` Entity. Generated by sea-orm-codegen 0.11.3

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "user")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    #[sea_orm(unique)]
    pub uuid: Uuid,
    pub name: String,
    #[sea_orm(unique)]
    pub email: String,
    pub password: String,
    pub phone: String,
    pub phone_code: i32,
    pub profession: Option<String>,
    pub ctc: i32,
    pub experience: i32,
    pub total_rating: i32,
    pub total_reviews: i32,
    pub company: Option<String>,
    pub linkedin: Option<String>,
    pub github: Option<String>,
    pub others: Option<String>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::review::Entity")]
    Review,
    #[sea_orm(has_many = "super::review_slot::Entity")]
    ReviewSlot,
    #[sea_orm(has_many = "super::roadmap_user::Entity")]
    RoadmapUser,
    #[sea_orm(has_many = "super::user_technology::Entity")]
    UserTechnology,
}

impl Related<super::review::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Review.def()
    }
}

impl Related<super::review_slot::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::ReviewSlot.def()
    }
}

impl Related<super::roadmap_user::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::RoadmapUser.def()
    }
}

impl Related<super::user_technology::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::UserTechnology.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
